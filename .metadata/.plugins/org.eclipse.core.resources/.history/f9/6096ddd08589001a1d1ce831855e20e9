package com.company.spring.demo.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.company.spring.demo.dto.UserDto;
import com.company.spring.demo.exception.UserNotFoundException;
import com.company.spring.demo.models.Address;
import com.company.spring.demo.models.User;
import com.company.spring.demo.services.UserService;

@RestController
@RequestMapping(value = "/api/v1/user")
public class UserRestController {

	@Autowired
	private UserService userService;

	@GetMapping
	public List<UserDto> getAllUser() {
		return userService.getAllUser();
	}

	@PostMapping
	public ResponseEntity<Object> createUsers(@RequestBody User user) {
		userService.createUser(user);
		return new ResponseEntity<>(HttpStatus.CREATED);
	}

	@GetMapping("/{id}")
	public UserDto getUserId(@PathVariable("id") long id) {

		
		if(true){
			throw new UserNotFoundException("user not fond " + id);
		}
		UserDto tempUser = userService.getUserById(id);
		if (tempUser == null) {
			System.out.println("user id is not fond "+id);
			throw new UserNotFoundException("user not fond " + id);
		}
		return tempUser;

	}

	@PutMapping("/{id}")
	public User updateUser(@RequestBody User user, @PathVariable("id") long id) {

		// User tempUser = userService.getUserById(id);

		// userService.updateUser(user, tempUser.getUserId());

		return user;
	}

	@DeleteMapping("/{id}")
	public User deleteRecipe(@PathVariable("id") int id) {

		// User userTemp = userService.getUserById(id);

		userService.deleteUser(id);
		return null;

	}

	@PostMapping("/{id}")
	public User addAddress(@RequestBody Address address, @PathVariable("id") long id) {

		// User tempUser = userService.getUserById(id);

		// List<Address> addressList = tempUser.getAddressList();
		// addressList.add(address);
		// userService.updateUser(tempUser, id);
		return null;
	}

	@PutMapping("/{id}/{addId}")
	public User updateAddress(@RequestBody Address address, @PathVariable("id") long id,
			@PathVariable("addId") long addId) {

		// User tempUser = userService.getUserById(id);
		//
		// // List<Address> addressList = tempUser.getAddressList();
		//
		// userService.updateUser(tempUser, id);
		return null;
	}

	@DeleteMapping("/{id}/{addId}")
	public User deleteAddress(@PathVariable("id") long id, @PathVariable("addId") long addId) {

		// User tempUser = userService.getUserById(id);
		//
		// // List<Address> addressList = tempUser.getAddressList();
		//
		// userService.updateUser(tempUser, id);
		return null;
	}

}
